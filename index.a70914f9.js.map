{"mappings":"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","sources":["src/js/upcomingThisMounth.js"],"sourcesContent":["\nimport axios from 'axios';\nimport { result } from 'lodash';\nimport Notiflix from 'notiflix';\n\nconst URL = 'https://api.themoviedb.org/3/movie/upcoming';\nconst API_KEY = '0b7ed72c0b07bc683ffc3b8a0e430792';\nconst GENRE_URL = `https://api.themoviedb.org/3/genre/movie/list`;\n\nconst upcomingFilm = document.querySelector('.upcoming-film');\nconst favoriteMovies = 'favoriteMovies';\n\n\nasync function getUpcomingData() {\n  const response = await axios.get(`${URL}?api_key=${API_KEY}`);\n  const result = response.data.results;\n\n  return result;\n}\n\nasync function getGenresById(genreIds) {\n  const response = await axios.get(`${GENRE_URL}?api_key=${API_KEY}`);\n  const data = response.data.genres;\n\n  const genreNames = genreIds.map(genreId => {\n    const genre = data.find(genre => genre.id === genreId);\n    return genre.name;\n  });\n\n  return genreNames.join(', ');\n}\n\nasync function getUpcoming() {\n  try {\n    const data = await getUpcomingData();\n\n    if (data.length === 0) {\n      renderMarkupError();\n      return;\n    }\n\n    const randomFilm = Math.floor(Math.random() * data.length);\n    const renderFilm = data[randomFilm];\n    const idFilm = renderFilm.id.toString();\n    const render = await createMarkup(renderFilm);\n    renderMarkup(render);\n\n    const upcomingBtn = document.querySelector('.upcoming_content_btn');\n    let savedLocal = localStorage.getItem('favoriteMovies');\n    let parsedLocal = JSON.parse(savedLocal);\n    parsedLocal = parsedLocal ? parsedLocal : [];\n\n    if (parsedLocal.find(movie => movie.id === idFilm)) {\n      upcomingBtn.textContent = 'Remove from my library';\n    } \n\n    upcomingBtn.addEventListener('click', () => {\n      let savedLocal = localStorage.getItem('favoriteMovies');\n      let parsedLocal = JSON.parse(savedLocal);\n      parsedLocal = parsedLocal ? parsedLocal : [];\n\n      if (!parsedLocal.find(movie => movie.id === idFilm)) {\n          const movieObject = { id: idFilm, start: '' };\n          parsedLocal.push(movieObject);\n          localStorage.setItem(favoriteMovies, JSON.stringify(parsedLocal));\n          upcomingBtn.textContent = 'Remove from my library';\n        } else {\n          let index = parsedLocal.findIndex(movie => movie.id === idFilm);\n          parsedLocal.splice(index, 1);\n          localStorage.setItem(favoriteMovies, JSON.stringify(parsedLocal));\n          upcomingBtn.textContent = 'Add to my library';\n        }\n    });\n  } catch (error) {\n    // console.log(error);\n    Notiflix.Notify.warning('OOPS... SOMETHING WENT WRONG');\n  }\n}\n\nasync function createMarkup({\n  poster_path,\n  backdrop_path,\n  genre_ids,\n  title,\n  overview,\n  vote_average,\n  vote_count,\n  release_date,\n  popularity,\n}) {\n  const genreNames = await getGenresById(genre_ids);\n\n    return `\n  \n\n     <picture class='upcoming_img'>\n      <source srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\" media=\"(min-width: 768px)\" loading=\"lazy\"/>\n      <source srcset=\"https://image.tmdb.org/t/p/original/${poster_path}\" media=\"(min-width: 320px)\" loading=\"lazy\"/>\n      <img src=\"https://image.tmdb.org/t/p/original/${poster_path}\" alt=\"Movie Poster\" loading=\"lazy\"/>\n    </picture>\n\n    <div class=\"upcoming_content\">\n      <h3 class=\"upcoming_name\">${title}</h3>\n\n      <div class=\"upcoming_thumb\">\n        <ul class=\"upcoming-list left\">\n          <li class=\"upcoming_list_item\">\n            <p class=\"upcoming_list_text color-h\">Release date</p>\n            <p class=\"upcoming_list_date color-p\">${release_date}</p>\n          </li>\n          <li class=\"upcoming_list_item\">\n            <p class=\"upcoming_list_text color-h\">Vote / Votes</p>\n            <p class=\"upcoming_list_vote\">\n              <span class=\"vote\">${vote_average}</span> / <span class=\"vote\">${vote_count}</span>\n            </p>\n          </li>\n        </ul>\n\n        <ul class=\"upcoming-list right\">\n          <li class=\"upcoming_list_item\">\n            <p class=\"upcoming_list_text color-h\">Popularity</p>\n            <p class=\"upcoming_list_pop\">${popularity.toFixed(1)}</p>\n          </li>\n          <li class=\"upcoming_list_item\">\n            <p class=\"upcoming_list_text color-h\">Genre</p>\n            <p class=\"upcoming_list_genre\">${genreNames}</p>\n          </li>\n        </ul>\n      </div>\n\n      <h3 class=\"upcoming_content_title color-h\">About</h3>\n      <p class=\"upcoming_content_text\">${overview}</p>\n\n      <button type=\"button\" class=\"upcoming_content_btn\" id=\"addLibrary\">\n         Add to my library\n      </button>\n    </div>\n  `;\n}\n\n\nfunction renderMarkup(markup) {\n    upcomingFilm.innerHTML = markup;\n}\n\nfunction renderMarkupError() {\n  upcomingFilm.innerHTML = `<div class=\"upcoming-error-container\">\n    <p class=\"upcoming_error_container_text\">\n    OOPS...<br />\n    We are very sorry!<br />\n    But we couldn't find any upcoming movies this month.\n    </p>\n  </div>`;\n}\n\ngetUpcoming();"],"names":["$bpxeT","parcelRequire","$97934864da50344b$var$URL","$97934864da50344b$var$API_KEY","$97934864da50344b$var$GENRE_URL","$97934864da50344b$var$upcomingFilm","document","querySelector","$97934864da50344b$var$favoriteMovies","$97934864da50344b$var$getUpcomingData","$97934864da50344b$var$_getUpcomingData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","result1","$dIxxU","default","get","concat","_ctx","sent","data","results","$97934864da50344b$var$getGenresById","genreIds","$97934864da50344b$var$_getGenresById","genreNames","genres","map","genreId","find","genre","id","name","join","$97934864da50344b$var$_getUpcoming","randomFilm","renderFilm","idFilm","upcomingBtn","savedLocal1","length","$97934864da50344b$var$renderMarkupError","Math","floor","random","toString","$97934864da50344b$var$createMarkup","$97934864da50344b$var$renderMarkup","localStorage","getItem","JSON","parse","movie","textContent","addEventListener","savedLocal","parsedLocal","index","findIndex","splice","setItem","stringify","movieObject","start","push","$6JpON","Notify","warning","_","$97934864da50344b$var$_createMarkup","param","poster_path","backdrop_path","genre_ids","title","overview","vote_average","vote_count","release_date","popularity","toFixed","markup","innerHTML","$97934864da50344b$var$getUpcoming"],"version":3,"file":"index.a70914f9.js.map"}